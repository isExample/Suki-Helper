plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	// 'test' Task가 성공적으로 실행된 후에만 리포트 생성
	dependsOn test

	reports {
		html.required = true
		xml.required = false
		csv.required = false
	}

	// 커버리지 측정에서 제외할 클래스 설정
	// DTO, Config, Enum, Exception 클래스 제외, 순수 비즈니스 로직의 커버리지를 측정
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/*Application*",
					"**/config/**",
					"**/dto/**",
					"**/common/**",
					"**/*Category",
					"**/advice/**",
					"**/log/**"
			])
		}))
	}
}

test {
	finalizedBy jacocoTestReport
}
